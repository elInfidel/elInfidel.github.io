{"version":3,"sources":["ContentCard.tsx","PortfolioContent.ts","ElementList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useContentCardStyles","makeStyles","theme","title","padding","spacing","border","borderRadius","ContentSection","props","children","classes","Typography","className","variant","align","employers","primary","secondary","href","src","projects","contributions","mediaLinks","useElementListStyles","listItem","ContainedAvatar","withStyles","img","objectFit","Avatar","ElementList","elements","elementComponents","map","el","ListItem","button","onClick","window","open","ListItemAvatar","alt","ListItemText","List","useAppStyles","content","margin","width","breakpoints","up","profilePicture","height","marginLeft","marginRight","display","footer","marginTop","App","Grid","container","justify","item","xs","md","Divider","Date","getFullYear","Boolean","location","hostname","match","createMuiTheme","typography","fontFamily","ReactDOM","render","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35eb8856.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\n\r\nconst useContentCardStyles = makeStyles((theme) => {\r\n    return {\r\n        title: {\r\n            padding: theme.spacing(1),\r\n            border: \"solid 1px lightgray\",\r\n            borderRadius: 5,\r\n        },\r\n    };\r\n});\r\n\r\nconst ContentSection: React.FunctionComponent<{\r\n    title: string;\r\n}> = (props) => {\r\n    const { children, title } = props;\r\n    const classes = useContentCardStyles();\r\n    return (\r\n        <div>\r\n            <Typography className={classes.title} variant=\"h5\" align=\"center\">\r\n                {title}\r\n            </Typography>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ContentSection;\r\n","export interface ElementDetails {\r\n    primary: string;\r\n    secondary?: string;\r\n    href: string;\r\n    src: string;\r\n}\r\n\r\nexport const employers: ElementDetails[] = [\r\n    {\r\n        primary: \"Spiff Pty Ltd\",\r\n        secondary: \"Product Personalization Platform\",\r\n        href: \"https://spiff.com.au/\",\r\n        src: \"img/spiff-logo.png\",\r\n    },\r\n    {\r\n        primary: \"Learn District\",\r\n        secondary: \"Childrens Education\",\r\n        href: \"http://learndistrict.com/\",\r\n        src: \"img/ld-logo.png\",\r\n    },\r\n];\r\n\r\nexport const projects: ElementDetails[] = [\r\n    {\r\n        primary: \"Lazurite\",\r\n        secondary: \"OpenGL Rendering Framework\",\r\n        href: \"https://github.com/elInfidel/lazurite\",\r\n        src: \"img/lazurite-logo.png\",\r\n    },\r\n    {\r\n        primary: \"Pyrite\",\r\n        secondary: \"Gameboy Emulator\",\r\n        href: \"https://github.com/elInfidel/pyrite-gbc\",\r\n        src: \"img/pyrite-logo.png\",\r\n    },\r\n];\r\n\r\nexport const contributions: ElementDetails[] = [\r\n    {\r\n        primary: \"OpenRCT2\",\r\n        secondary: \"Open Source Reimplementation\",\r\n        href: \"https://openrct2.org/\",\r\n        src: \"img/openrct2-logo.png\",\r\n    },\r\n    {\r\n        primary: \"BabylonJS\",\r\n        secondary: \"WebGL Rendering Framework\",\r\n        href: \"https://www.babylonjs.com/\",\r\n        src: \"img/babylon-logo.png\",\r\n    },\r\n];\r\n\r\nexport const mediaLinks: ElementDetails[] = [\r\n    {\r\n        primary: \"Github\",\r\n        href: \"https://github.com/elInfidel\",\r\n        src: \"img/github-logo.png\",\r\n    },\r\n    {\r\n        primary: \"LinkedIn\",\r\n        href: \"https://www.linkedin.com/in/liam-parker-40063648/\",\r\n        src: \"img/linked-in-logo.png\",\r\n    },\r\n];\r\n","import {\r\n    Avatar,\r\n    List,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    makeStyles,\r\n    withStyles,\r\n} from \"@material-ui/core\";\r\nimport * as React from \"react\";\r\nimport { ElementDetails } from \"./PortfolioContent\";\r\n\r\nconst useElementListStyles = makeStyles(() => {\r\n    return {\r\n        listItem: {\r\n            borderRadius: 5,\r\n        },\r\n    };\r\n});\r\n\r\nconst ContainedAvatar = withStyles({\r\n    img: {\r\n        objectFit: \"contain\",\r\n    },\r\n})(Avatar);\r\n\r\nconst ElementList: React.FunctionComponent<{ elements: ElementDetails[] }> = (\r\n    props\r\n) => {\r\n    const { elements } = props;\r\n    const classes = useElementListStyles();\r\n    const elementComponents = elements.map((el) => (\r\n        <ListItem\r\n            className={classes.listItem}\r\n            key={el.src}\r\n            button\r\n            onClick={() => window.open(el.href)}\r\n        >\r\n            <ListItemAvatar>\r\n                <ContainedAvatar\r\n                    variant=\"square\"\r\n                    alt={el.primary}\r\n                    src={el.src}\r\n                />\r\n            </ListItemAvatar>\r\n            <ListItemText primary={el.primary} secondary={el.secondary} />\r\n        </ListItem>\r\n    ));\r\n    return <List>{elementComponents}</List>;\r\n};\r\n\r\nexport default ElementList;\r\n","import { Divider, Grid, makeStyles, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ContentSection from \"./ContentCard\";\r\nimport \"typeface-quicksand\";\r\nimport {\r\n    contributions,\r\n    employers,\r\n    mediaLinks,\r\n    projects,\r\n} from \"./PortfolioContent\";\r\nimport ElementList from \"./ElementList\";\r\n\r\nconst useAppStyles = makeStyles((theme) => {\r\n    return {\r\n        content: {\r\n            margin: theme.spacing(0, \"auto\"),\r\n            width: \"100%\",\r\n            [theme.breakpoints.up(\"md\")]: {\r\n                width: \"50%\",\r\n            },\r\n        },\r\n        profilePicture: {\r\n            width: 150,\r\n            height: 150,\r\n            marginLeft: \"auto\",\r\n            marginRight: \"auto\",\r\n            display: \"block\",\r\n            borderRadius: 100,\r\n        },\r\n        footer: {\r\n            marginTop: theme.spacing(1),\r\n        },\r\n    };\r\n});\r\n\r\nconst App: React.FunctionComponent = () => {\r\n    const classes = useAppStyles();\r\n    return (\r\n        <>\r\n            <Grid container className={classes.content} justify=\"center\">\r\n                <Grid item xs={12}>\r\n                    <img\r\n                        className={classes.profilePicture}\r\n                        src=\"https://avatars3.githubusercontent.com/u/7558040?s=460&v=4\"\r\n                        alt=\"a portrait of liam\"\r\n                    />\r\n                    <Typography align=\"center\" variant=\"h2\">\r\n                        Liam Parker\r\n                    </Typography>\r\n                    <Typography align=\"center\">\r\n                        I am a software developer based in Melbourne, Australia.\r\n                        I currently work at #Spiff, an exciting tech startup in\r\n                        Docklands. We're working on a cloud based product\r\n                        personalization platform.\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid\r\n                container\r\n                spacing={1}\r\n                className={classes.content}\r\n                justify=\"center\"\r\n            >\r\n                <Grid item xs={12} md={6}>\r\n                    <ContentSection title=\"Employment History\">\r\n                        <ElementList elements={employers} />\r\n                    </ContentSection>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ContentSection title=\"Personal Projects\">\r\n                        <ElementList elements={projects} />\r\n                    </ContentSection>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ContentSection title=\"Open Source\">\r\n                        <ElementList elements={contributions} />\r\n                    </ContentSection>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <ContentSection title=\"Social Media\">\r\n                        <ElementList elements={mediaLinks} />\r\n                    </ContentSection>\r\n                </Grid>\r\n            </Grid>\r\n            <Divider className={classes.footer} />\r\n            <footer>\r\n                <Grid container spacing={1} className={classes.content}>\r\n                    <Grid item xs={12}>\r\n                        <Typography variant=\"caption\">\r\n                            &copy; Copyright 2015 - {new Date().getFullYear()},\r\n                            Liam Parker\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n            </footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst theme = createMuiTheme({\r\n    spacing: 8 * 3,\r\n    typography: {\r\n        fontFamily: \"Quicksand\",\r\n    },\r\n});\r\n\r\nReactDOM.render(\r\n    <ThemeProvider theme={theme}>\r\n        <App />\r\n    </ThemeProvider>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}