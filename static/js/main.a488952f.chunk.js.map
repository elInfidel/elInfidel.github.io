{"version":3,"sources":["components/Terminal/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Terminal","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","terminal","XTerm","cursorBlink","lineBuffer","inherits","createClass","key","value","_this2","react","className","ref","r","buildTerminal","domRef","_this3","Error","open","writeln","prompt","on","ev","printable","altKey","ctrlKey","metaKey","keyCode","processCommand","substring","write","command","clear","printMessage","message","React","App","react_default","a","createElement","href","target","src","Terminal_Terminal","Component","Boolean","window","location","hostname","match","require","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a488952f.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport * as XTerm from 'xterm';\r\n\r\nimport './xterm.scss';\r\n\r\nexport class Terminal extends React.Component {\r\n\r\n    private terminal = new XTerm.Terminal({ cursorBlink: true });\r\n    private lineBuffer: string = '';\r\n\r\n    public render() {\r\n        return <div className=\"terminal\" ref={(r)=>this.buildTerminal(r)} />;\r\n    }\r\n\r\n    private buildTerminal(domRef: HTMLElement | null) {\r\n\r\n        if (!domRef) {\r\n            throw new Error('Ref was not passed!');\r\n        } \r\n\r\n        this.terminal.open(domRef);\r\n\r\n        this.terminal.writeln('Welcome to my portfolio');\r\n        this.terminal.writeln('There\\'s some hidden functionality here. See if you can figure it out.');\r\n        this.terminal.writeln('No cheating!');\r\n        this.prompt();\r\n\r\n        this.terminal.on('key', (key, ev) => {\r\n            const printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;\r\n            if (ev.keyCode === 13) {\r\n                if (this.lineBuffer.length > 0) {\r\n                    this.processCommand(this.lineBuffer);\r\n                }\r\n                this.lineBuffer = '';\r\n                this.prompt();\r\n            } else if (ev.keyCode === 8) {\r\n                if (this.lineBuffer.length === 0) { return; }\r\n                this.lineBuffer = this.lineBuffer.substring(0, this.lineBuffer.length - 1);\r\n                this.terminal.write('\\b \\b');\r\n            } else if (printable) {\r\n                this.lineBuffer = this.lineBuffer.concat(key);\r\n                this.terminal.write(key);\r\n            }\r\n        });\r\n    }\r\n\r\n    private prompt() {\r\n        this.terminal.write('\\r\\n$ ');\r\n    };\r\n\r\n    private processCommand(command: string) {\r\n        switch (command) {\r\n            case 'clear':\r\n                this.terminal.clear();\r\n                break;\r\n            default:\r\n                this.terminal.write('\\r\\n\\n');\r\n                this.printMessage('Unrecognized Command: ' + command);\r\n        }\r\n    }\r\n\r\n    private printMessage(message: string) {\r\n        this.terminal.writeln('  ' + message);\r\n    }\r\n}","import React, { Component } from 'react';\nimport './styles.scss';\nimport { Terminal } from './components/Terminal';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"flex-wrapper\">\n        <div className=\"main-content\">\n          <h1 className=\"title\">Liam Parker</h1>\n\n          <div className=\"sub\">\n            <h2>About me.</h2>\n            <p className=\"bio\">\n              I am a junior software developer based in Melbourne, Australia. I currently work at #Spiff, an exciting tech startup in Southbank.\n              We're working on a packaging customization platform.\n            </p>\n\n            <h2>People I've worked with.</h2>\n            <div className=\"companies\">\n              <a href=\"https://editor.spiff.com.au/\" target=\"_blank\">\n                <img src=\"img/spiff-logo.png\" />\n              </a>\n              <a href=\"http://learndistrict.com/\" target=\"_blank\">\n                <img src=\"img/ld-logo.png\" />\n              </a>\n            </div>\n\n            <h2>My personal work.</h2>\n            <p>Coming Soon</p>\n            <h2>Links.</h2>\n            <div className=\"social-media\">\n              <a href=\"https://github.com/elInfidel\" target=\"_blank\">\n                <img src=\"img/github-logo.png\" />\n              </a>\n              <a href=\"https://www.linkedin.com/in/liam-parker-40063648/\" target=\"_blank\">\n                <img src=\"img/linked-in-logo.png\" />\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"term-wrapper\">\n          <Terminal />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrequire('typeface-quicksand')\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}